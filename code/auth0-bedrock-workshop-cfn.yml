---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create an Amazon Bedrock agent

Resources:

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bedrock-sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: BedrockAgent

  # IAM Role for Lambda Function
  CIBALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CIBALambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # CIBA Lambda Function
  CIBALambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CIBAAuthenticationFunction
      Runtime: python3.12
      Handler: ciba.lambda_handler
      Role: !GetAtt CIBALambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Code:
        ZipFile: |
          # Placeholder - Import ciba.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          AUTH0_DOMAIN: "YOUR_AUTH0_DOMAIN"
          AUTH0_CLIENT_ID: "YOUR_CLIENT_ID"
          AUTH0_CLIENT_SECRET: "YOUR_CLIENT_SECRET"
          CIBA_BINDING_MESSAGE: "123456"
          CIBA_SCOPE: "openid profile"
      Description: "Lambda function for CIBA authentication flow"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: CIBA

  # IAM Role for FGA Lambda Function
  FGALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FGALambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # FGA Lambda Function
  FGALambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FGAAuthorizationFunction
      Runtime: python3.12
      Handler: fga_check.lambda_handler
      Role: !GetAtt FGALambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          # Placeholder - Import fga_check.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          FGA_API_ISSUER: "fga.us.auth0.com"
          FGA_API_AUDIENCE: "https://api.us1.fga.dev/"
          FGA_CLIENT_ID: "YOUR_FGA_CLIENT_ID"
          FGA_CLIENT_SECRET: "YOUR_FGA_CLIENT_SECRET"
          FGA_API_SCHEME: "https"
          FGA_API_HOST: "api.us1.fga.dev"
          FGA_STORE_ID: "YOUR_FGA_STORE_ID"
          FGA_AUTHORIZATION_MODEL_ID: "YOUR_FGA_AUTHORIZATION_MODEL_ID"
      Description: "Lambda function for FGA authorization checks"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: FGA

  # IAM Role for FGA Tokenset Lambda Function
  FGATokensetLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FGATokensetLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt FGALambdaFunction.Arn

  # FGA Tokenset Lambda Function
  FGATokensetLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FGATokensetFunction
      Runtime: python3.12
      Handler: fga_tokenset.lambda_handler
      Role: !GetAtt FGATokensetLambdaRole.Arn
      Timeout: 60
      MemorySize: 512
      Code:
        ZipFile: |
          # Placeholder - Import token_vault.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref DynamoDBTable
          FGA_AUTHORIZER_FUNCTION_NAME: !Ref FGALambdaFunction
          OKTA_DOMAIN: "https://youroktadomain.com"
          DEFAULT_OBJECT: "okta:groups"
          DEFAULT_RELATION: "read_okta"
          REQUEST_TIMEOUT: "30"
          MAX_RETRIES: "3"
      Description: "Lambda function for FGA tokenset operations with Okta integration"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: FGATokenset

  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt CIBALambdaFunction.Arn
                  - !GetAtt FGALambdaFunction.Arn
                  - !GetAtt FGATokensetLambdaFunction.Arn

  # Amazon Bedrock Agent
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: workshop-agent
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: "Bedrock agent powered by Amazon Nova"
      FoundationModel: amazon.nova-pro-v1:0
      IdleSessionTTLInSeconds: 1800
      Instruction: "This agent will use action groups to get user details and greet users when they say hi or hello. This agent will handle two sets of operations: one for retrieving Okta Groups for a user, and the agent will use the FGATokensetOperations operation to process the request. The other operation would be the user performing an elevated operation, like resetting a password for an Okta user the agent will invoke the CIBAAuthentication action group."
      ActionGroups:
        - ActionGroupName: CIBAAuthentication
          Description: "Action group for CIBA authentication"
          ActionGroupExecutor:
            Lambda: !GetAtt CIBALambdaFunction.Arn
          FunctionSchema:
            Functions:
              - Name: authenticate_user
                Description: "Use this action group when the user is trying to perform Delete a user, reset a password, or disable a user. Use this action group only when an elevated operations related to a user such as reset a password, disable the user"
                Parameters:
                  user_id:
                    Type: string
                    Description: "User identifier for authentication"
                    Required: true
        - ActionGroupName: FGATokensetOperations
          Description: "Action group for FGA tokenset operations and Okta group retrieval"
          ActionGroupExecutor:
            Lambda: !GetAtt FGATokensetLambdaFunction.Arn
          FunctionSchema:
            Functions:
              - Name: get_user_groups
                Description: "Retrieve user groups from Okta using session-based authorization"
                Parameters:
                  user_email:
                    Type: string
                    Description: "Email address of the user to retrieve groups for"
                    Required: true
      Tags:
        Purpose: Workshop

  # Agent Alias
  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref BedrockAgent
      AgentAliasName: WorkshopAlias
      Description: "Production alias for Amazon Nova agent"
      Tags:
        Environment: Workshop

  # IAM Role for Flask Lambda Function
  FlaskLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FlaskLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource: "*"

  # Flask Lambda Function
  FlaskLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FlaskWebApplication
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt FlaskLambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      # Import flask_app.zip into this lambda
      Code:
        ZipFile: |
          # Placeholder - Import flask_app.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          APP_SECRET_KEY: "tJxc4s8mdmYQE5HbW9uAopTR5jLgN8qSWlGrkFIh6wA="
          AUTH0_CLIENT_ID: "YOUR_AUTH0_CLIENT_ID"
          AUTH0_CLIENT_SECRET: "YOUR_AUTH0_CLIENT_SECRET"
          AUTH0_DOMAIN: "YOUR_AUTH0_DOMAIN"
          AUTH0_CALLBACK_URL: !Sub "https://${FlaskApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/callback"
          AUTH0_CONNECTION_NAME: "MediaXMedia-Okta"
          BEDROCK_AGENT_ID: !Ref BedrockAgent
          BEDROCK_AGENT_ALIAS_ID: !GetAtt BedrockAgentAlias.AgentAliasId
          SESSION_TABLE_NAME: !Ref DynamoDBTable
      Description: "Flask web application for Auth0 + Bedrock integration"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: FlaskApp

  # API Gateway REST API
  FlaskApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FlaskBedrockAPI
      Description: "API Gateway for Flask Bedrock application"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource (Proxy)
  FlaskApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FlaskApiGateway
      ParentId: !GetAtt FlaskApiGateway.RootResourceId
      PathPart: "{proxy+}"

  # API Gateway Method (ANY for proxy)
  FlaskApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlaskApiGateway
      ResourceId: !Ref FlaskApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FlaskLambdaFunction.Arn}/invocations"

  # API Gateway Method for Root Resource
  FlaskApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlaskApiGateway
      ResourceId: !GetAtt FlaskApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FlaskLambdaFunction.Arn}/invocations"

  # API Gateway Deployment
  FlaskApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - FlaskApiGatewayMethod
      - FlaskApiGatewayRootMethod
    Properties:
      RestApiId: !Ref FlaskApiGateway
      Description: "Deployment for Flask Bedrock API"

  # API Gateway Stage
  FlaskApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref FlaskApiGateway
      DeploymentId: !Ref FlaskApiGatewayDeployment
      StageName: prod
      Description: "Production stage for Flask Bedrock API"

  # Lambda Permission for API Gateway
  FlaskLambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FlaskLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FlaskApiGateway}/*/*/*"

  # Lambda Permission for Bedrock to invoke CIBA function
  CIBALambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CIBALambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  # Lambda Permission for Bedrock to invoke FGA function
  FGALambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FGALambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  # Lambda Permission for Bedrock to invoke FGA Tokenset function
  FGATokensetLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FGATokensetLambdaFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

Outputs:
  BedrockAgentId:
    Description: ID of the created Bedrock Agent
    Value: !Ref BedrockAgent
  BedrockAgentAliasId:
    Description: ID of the created Bedrock Agent Alias
    Value: !Ref BedrockAgentAlias
  DynamoDBTableName:
    Description: Name of the DynamoDB table for session management
    Value: !Ref DynamoDBTable
  CIBALambdaFunctionArn:
    Description: ARN of the CIBA Lambda function
    Value: !GetAtt CIBALambdaFunction.Arn
  FGALambdaFunctionArn:
    Description: ARN of the FGA Lambda function
    Value: !GetAtt FGALambdaFunction.Arn
  FGATokensetLambdaFunctionArn:
    Description: ARN of the FGA Tokenset Lambda function
    Value: !GetAtt FGATokensetLambdaFunction.Arn
  FlaskLambdaFunctionArn:
    Description: ARN of the Flask Lambda function
    Value: !GetAtt FlaskLambdaFunction.Arn
  FlaskApiGatewayUrl:
    Description: URL of the Flask application via API Gateway
    Value: !Sub "https://${FlaskApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  FlaskApiGatewayId:
    Description: ID of the API Gateway for the Flask application
    Value: !Ref FlaskApiGateway