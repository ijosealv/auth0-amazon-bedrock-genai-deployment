---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create an Amazon Bedrock agent



Resources:

  # IAM Role for Fernet Key Generator Lambda
  FernetKeyGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FernetKeyGeneratorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function to Generate Fernet Key
  FernetKeyGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: fernet-key-generator
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt FernetKeyGeneratorRole.Arn
      Timeout: 60
      MemorySize: 128
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          import base64
          import os
          
          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # CloudFormation Custom Resource response
              response_url = event.get('ResponseURL')
              stack_id = event.get('StackId')
              request_id = event.get('RequestId')
              logical_resource_id = event.get('LogicalResourceId')
              request_type = event.get('RequestType')
              
              response_data = {}
              status = 'SUCCESS'
              reason = 'Fernet key generated successfully'
              
              try:
                  if request_type in ['Create', 'Update']:
                      # Generate a Fernet key (32 random bytes, base64 encoded)
                      import secrets
                      key_bytes = secrets.token_bytes(32)
                      fernet_key = base64.urlsafe_b64encode(key_bytes).decode('utf-8')
                      
                      print(f"Generated Fernet key: {fernet_key}")
                      
                      response_data = {
                          'FernetKey': fernet_key,
                          'KeyLength': len(fernet_key)
                      }
                      
                  elif request_type == 'Delete':
                      print("Delete request - no action needed")
                      response_data = {'Message': 'Delete completed'}
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  status = 'FAILED'
                  reason = f'Error generating Fernet key: {str(e)}'
                  response_data = {'Error': str(e)}
              
              # Send response back to CloudFormation
              response_body = {
                  'Status': status,
                  'Reason': reason,
                  'PhysicalResourceId': f"fernet-key-{request_id}",
                  'StackId': stack_id,
                  'RequestId': request_id,
                  'LogicalResourceId': logical_resource_id,
                  'Data': response_data
              }
              
              print(f"Sending response: {json.dumps(response_body)}")
              
              # Send HTTP response to CloudFormation
              http = urllib3.PoolManager()
              response = http.request(
                  'PUT',
                  response_url,
                  body=json.dumps(response_body).encode('utf-8'),
                  headers={'Content-Type': 'application/json'}
              )
              
              print(f"CloudFormation response status: {response.status}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(response_data)
              }
      Description: "Lambda function to generate Fernet encryption keys for CloudFormation"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: KeyGeneration

  # Custom Resource to Generate Fernet Key
  GeneratedFernetKey:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt FernetKeyGeneratorLambda.Arn
      # Force update on stack updates by including a timestamp-like value
      UpdateTrigger: !Ref AWS::StackName

  # Secrets Manager Secret for Token Encryption
  TokenEncryptionSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn: GeneratedFernetKey
    Properties:
      Name: token-encryption-key
      Description: "Encryption key for session tokens in DynamoDB"
      SecretString: !Sub |
        {
          "key": "${GeneratedFernetKey.FernetKey}"
        }
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: TokenEncryption

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bedrock-sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: BedrockAgent

  # IAM Role for CIBA Lambda Function
  CibaFlowLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CIBALambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # CIBA Lambda Function
  CibaFlowLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ciba-flow-lambda
      Runtime: python3.12
      Handler: ciba.lambda_handler
      Role: !GetAtt CibaFlowLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Code:
        ZipFile: |
          # Placeholder - Import ciba-flow-lambda.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          AUTH0_DOMAIN: "YOUR_AUTH0_DOMAIN"
          AUTH0_CLIENT_ID: "YOUR_CLIENT_ID"
          AUTH0_CLIENT_SECRET: "YOUR_CLIENT_SECRET"
          CIBA_BINDING_MESSAGE: "12345"
          CIBA_SCOPE: "openid profile"
      Description: "Lambda function for CIBA authentication flow"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: CIBA

  # IAM Role for FGA Lambda Function
  FgaCheckLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FGALambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !GetAtt DynamoDBTable.Arn

  # FGA Lambda Function
  FgaCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: fga-check-lambda
      Runtime: python3.12
      Handler: fga_check.lambda_handler
      Role: !GetAtt FgaCheckLambdaRole.Arn
      Timeout: 30
      MemorySize: 256
      Code:
        ZipFile: |
          # Placeholder - Import fga-check-lambda.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          FGA_API_ISSUER: "fga.us.auth0.com"
          FGA_API_AUDIENCE: "https://api.us1.fga.dev/"
          FGA_CLIENT_ID: "YOUR_FGA_CLIENT_ID"
          FGA_CLIENT_SECRET: "YOUR_FGA_CLIENT_SECRET"
          FGA_API_SCHEME: "https"
          FGA_API_HOST: "api.us1.fga.dev"
          FGA_STORE_ID: "YOUR_FGA_STORE_ID"
          FGA_AUTHORIZATION_MODEL_ID: "YOUR_FGA_AUTHORIZATION_MODEL_ID"
      Description: "Lambda function for FGA authorization checks"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: FGA

  # IAM Role for FGA Tokenset Lambda Function
  OktaTokenLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: OktaTokenLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt FgaCheckLambda.Arn
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref TokenEncryptionSecret

  # FGA Tokenset Lambda Function
  OktaTokenLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: okta-token-lambda
      Runtime: python3.12
      Handler: fga_tokenset.lambda_handler
      Role: !GetAtt OktaTokenLambdaRole.Arn
      Timeout: 60
      MemorySize: 512
      Code:
        ZipFile: |
          # Placeholder - Import okta-token-lambda.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref DynamoDBTable
          FGA_AUTHORIZER_FUNCTION_NAME: !Ref FgaCheckLambda
          OKTA_DOMAIN: "https://youroktadomain.com"
          DEFAULT_OBJECT: "okta:groups"
          DEFAULT_RELATION: "read_okta"
          REQUEST_TIMEOUT: "30"
          MAX_RETRIES: "3"
          TOKEN_ENCRYPTION_SECRET_NAME: !Ref TokenEncryptionSecret
      Description: "Lambda function for FGA tokenset operations with Okta integration"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: FGATokenset

  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt CibaFlowLambda.Arn
                  - !GetAtt FgaCheckLambda.Arn
                  - !GetAtt OktaTokenLambda.Arn

  # Amazon Bedrock Agent
  BedrockAgent:
    Type: AWS::Bedrock::Agent
    DependsOn:
      - CibaFlowLambda
      - OktaTokenLambda
    Properties:
      AgentName: workshop-agent
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: "Bedrock agent powered by Amazon Nova"
      FoundationModel: amazon.nova-pro-v1:0
      IdleSessionTTLInSeconds: 1800
      Instruction: "This agent will use action groups to get user details and greet users when they say hi or hello. This agent will handle two sets of operations: one for retrieving Okta Groups for a user, and the agent will use the OktaOperations operation to process the request. The other operation would be the user performing an elevated operation, like resetting a password for an Okta user the agent will invoke the CIBAAuthentication action group."
      ActionGroups:
        - ActionGroupName: CIBAAuthentication
          Description: "Action group for CIBA authentication"
          ActionGroupExecutor:
            Lambda: !GetAtt CibaFlowLambda.Arn
          FunctionSchema:
            Functions:
              - Name: authenticate_user
                Description: "Use this action group when the user is trying to perform Delete a user, reset a password, or disable a user. Use this action group only when an elevated operations related to a user such as reset a password, disable the user"
                Parameters:
                  user_id:
                    Type: string
                    Description: "User identifier for authentication"
                    Required: true
        - ActionGroupName: OktaOperations
          Description: "Action group for FGA tokenset operations and Okta group retrieval"
          ActionGroupExecutor:
            Lambda: !GetAtt OktaTokenLambda.Arn
          FunctionSchema:
            Functions:
              - Name: get_user_groups
                Description: "Retrieve user groups from Okta using session-based authorization"
                Parameters:
                  user_email:
                    Type: string
                    Description: "Email address of the user to retrieve groups for"
                    Required: true
      Tags:
        Purpose: Workshop

  # Agent Alias
  BedrockAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    DependsOn: BedrockAgent
    Properties:
      AgentId: !Ref BedrockAgent
      AgentAliasName: WorkshopAlias
      Description: "Production alias for Amazon Nova agent"
      Tags:
        Environment: Workshop

  # IAM Role for Flask Lambda Function
  BedrockWebAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FlaskLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeAgent
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref TokenEncryptionSecret

  # Flask Lambda Function
  BedrockWebApp:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-web-app
      Runtime: python3.12
      Handler: lambda_function.lambda_handler
      Role: !GetAtt BedrockWebAppRole.Arn
      Timeout: 30
      MemorySize: 512
      # Import flask_app.zip into this lambda
      Code:
        ZipFile: |
          # Placeholder - Import bedrock-web-app.zip into this lambda function
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder'}
      Environment:
        Variables:
          APP_SECRET_KEY: "tJxc4s8mdmYQE5HbW9uAopTR5jLgN8qSWlGrkFIh6wA="
          AUTH0_CLIENT_ID: "YOUR_AUTH0_CLIENT_ID"
          AUTH0_CLIENT_SECRET: "YOUR_AUTH0_CLIENT_SECRET"
          AUTH0_DOMAIN: "YOUR_AUTH0_DOMAIN"
          AUTH0_CALLBACK_URL: !Sub "https://${FlaskApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/callback"
          AUTH0_CONNECTION_NAME: "YOUR_AUTH0_OpenID_CONNECTION_NAME"
          BEDROCK_AGENT_ID: !Ref BedrockAgent
          BEDROCK_AGENT_ALIAS_ID: !GetAtt BedrockAgentAlias.AgentAliasId
          SESSION_TABLE_NAME: !Ref DynamoDBTable
          TOKEN_ENCRYPTION_SECRET_NAME: !Ref TokenEncryptionSecret
      Description: "Amazon Bedrock web chat application"
      Tags:
        - Key: Purpose
          Value: Workshop
        - Key: Service
          Value: FlaskApp

  # API Gateway REST API
  FlaskApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: FlaskBedrockAPI
      Description: "API Gateway for Flask Bedrock application"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource (Proxy)
  FlaskApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref FlaskApiGateway
      ParentId: !GetAtt FlaskApiGateway.RootResourceId
      PathPart: "{proxy+}"

  # API Gateway Method (ANY for proxy)
  FlaskApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlaskApiGateway
      ResourceId: !Ref FlaskApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockWebApp.Arn}/invocations"

  # API Gateway Method for Root Resource
  FlaskApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref FlaskApiGateway
      ResourceId: !GetAtt FlaskApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockWebApp.Arn}/invocations"

  # API Gateway Deployment
  FlaskApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - FlaskApiGatewayMethod
      - FlaskApiGatewayRootMethod
    Properties:
      RestApiId: !Ref FlaskApiGateway
      Description: "Deployment for Flask Bedrock API"

  # API Gateway Stage
  FlaskApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref FlaskApiGateway
      DeploymentId: !Ref FlaskApiGatewayDeployment
      StageName: prod
      Description: "Production stage for Flask Bedrock API"

  # Lambda Permission for API Gateway
  FlaskLambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockWebApp
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FlaskApiGateway}/*/*/*"

  # Lambda Permission for Bedrock to invoke CIBA function
  CIBALambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CibaFlowLambda
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  # Lambda Permission for Bedrock to invoke FGA function
  FGALambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FgaCheckLambda
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  # Lambda Permission for Bedrock to invoke FGA Tokenset function
  FGATokensetLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OktaTokenLambda
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*"

  # Lambda Permission for OktaTokenLambda to invoke FgaCheckLambda
  OktaTokenLambdaInvokeFgaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FgaCheckLambda
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt OktaTokenLambda.Arn

  # Lambda Permission for CloudFormation to invoke Fernet Key Generator
  FernetKeyGeneratorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FernetKeyGeneratorLambda
      Action: lambda:InvokeFunction
      Principal: cloudformation.amazonaws.com

Outputs:
  BedrockAgentId:
    Description: ID of the created Bedrock Agent
    Value: !Ref BedrockAgent
  BedrockAgentAliasId:
    Description: ID of the created Bedrock Agent Alias
    Value: !Ref BedrockAgentAlias
  DynamoDBTableName:
    Description: Name of the DynamoDB table for session management
    Value: !Ref DynamoDBTable
  CIBALambdaFunctionArn:
    Description: ARN of the CIBA Lambda function
    Value: !GetAtt CibaFlowLambda.Arn
  FGALambdaFunctionArn:
    Description: ARN of the FGA Lambda function
    Value: !GetAtt FgaCheckLambda.Arn
  FGATokensetLambdaFunctionArn:
    Description: ARN of the FGA Tokenset Lambda function
    Value: !GetAtt OktaTokenLambda.Arn
  TokenEncryptionSecretArn:
    Description: ARN of the token encryption secret
    Value: !Ref TokenEncryptionSecret
  TokenEncryptionSecretName:
    Description: Name of the token encryption secret
    Value: !Ref TokenEncryptionSecret
  FlaskLambdaFunctionArn:
    Description: ARN of the Flask Lambda function
    Value: !GetAtt BedrockWebApp.Arn
  FlaskApiGatewayUrl:
    Description: URL of the Flask application via API Gateway
    Value: !Sub "https://${FlaskApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  FlaskApiGatewayId:
    Description: ID of the API Gateway for the Flask application
    Value: !Ref FlaskApiGateway
  GeneratedFernetKey:
    Description: Generated Fernet encryption key (for reference only)
    Value: !GetAtt GeneratedFernetKey.FernetKey
  FernetKeyLength:
    Description: Length of the generated Fernet key
    Value: !GetAtt GeneratedFernetKey.KeyLength
